"use strict";(self.webpackChunkflexbench=self.webpackChunkflexbench||[]).push([[8],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||l;return t?a.createElement(f,i(i({ref:n},u),{},{components:t})):a.createElement(f,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},173:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const l={},i="Flexbench OpenAPI Module",o={unversionedId:"GSoC/2024/OpenAPI/README",id:"GSoC/2024/OpenAPI/README",title:"Flexbench OpenAPI Module",description:"This module parses OpenAPI documents and generates test scenarios in the form of .flex files and cURL commands for use with Flexbench.",source:"@site/docs/GSoC/2024/OpenAPI/README.md",sourceDirName:"GSoC/2024/OpenAPI",slug:"/GSoC/2024/OpenAPI/",permalink:"/flexbench/docs/GSoC/2024/OpenAPI/",draft:!1,editUrl:"https://github.com/flexivian/flexbench/docs/GSoC/2024/OpenAPI/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Anonymization-Feature-Report",permalink:"/flexbench/docs/GSoC/2024/Anonymization/Anonymization-Feature-Report"},next:{title:"OpenAPI-Feature-Report",permalink:"/flexbench/docs/GSoC/2024/OpenAPI/OpenAPI-Integration-Report"}},p={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"OpenAI API Key Setup",id:"openai-api-key-setup",level:3},{value:"Linux/MacOS:",id:"linuxmacos",level:4},{value:"Module Configuration (Optional)",id:"module-configuration-optional",level:3},{value:"Usage",id:"usage",level:2},{value:"Generating <code>.flex</code> Files and cURL Commands",id:"generating-flex-files-and-curl-commands",level:3},{value:"Static Approach (Faker)",id:"static-approach-faker",level:4},{value:"AI Approach (OpenAI GPT)",id:"ai-approach-openai-gpt",level:4},{value:"Running the Scripts",id:"running-the-scripts",level:3},{value:"Generate cURL Commands",id:"generate-curl-commands",level:3},{value:"Generate Flex Scenarios",id:"generate-flex-scenarios",level:3},{value:"Generate Both cURL Commands and Flex Scenarios",id:"generate-both-curl-commands-and-flex-scenarios",level:3},{value:"Customizing Script Execution",id:"customizing-script-execution",level:3},{value:"Params Explained:",id:"params-explained",level:3},{value:"Using Generated <code>.flex</code> and cURL Files",id:"using-generated-flex-and-curl-files",level:2},{value:"Mock Server Setup",id:"mock-server-setup",level:3},{value:"Use with Flexbench",id:"use-with-flexbench",level:3},{value:"Testing",id:"testing",level:2},{value:"Running Tests",id:"running-tests",level:3}],u={toc:s};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flexbench-openapi-module"},"Flexbench OpenAPI Module"),(0,r.kt)("p",null,"This module parses OpenAPI documents and generates test scenarios in the form of ",(0,r.kt)("inlineCode",{parentName:"p"},".flex")," files and cURL commands for use with Flexbench."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Node.js"),": Ensure you have Node.js installed, preferably the latest LTS version. Verify the installation with:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"node -v\nnpm -v\n")),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"openapi-module/\n\u251c\u2500\u2500 node_modules/               # Dependencies installed via npm\n\u251c\u2500\u2500 sample/                     # Sample files for testing\n\u2502   \u2514\u2500\u2500 sample-openapi.yaml     # Example OpenAPI document\n\u251c\u2500\u2500 scripts/                    # Scripts for generating outputs\n\u2502   \u251c\u2500\u2500 generate-all.js         # Script to generate both cURL commands and Flex scenarios\n\u2502   \u251c\u2500\u2500 generate-curl.js        # Script to generate cURL commands\n\u2502   \u2514\u2500\u2500 generate-flex.js        # Script to generate Flex scenarios (.flex files)\n\u251c\u2500\u2500 src/                        # Source files\n\u2502   \u251c\u2500\u2500 generators/             # Scenario and command generation logic\n\u2502   \u2502   \u251c\u2500\u2500 curl-generator.js   # Logic for generating cURL commands\n\u2502   \u2502   \u251c\u2500\u2500 field-mapping.js    # Mapping for generating fake data\n\u2502   \u2502   \u251c\u2500\u2500 flex-generator.js   # Logic for generating Flex scenarios\n\u2502   \u2502   \u2514\u2500\u2500 gpt-flex-generator.js # Logic for generating Flex scenarios using GPT\n\u2502   \u251c\u2500\u2500 GPT/                    # GPT related configuration\n\u2502   \u2502   \u2514\u2500\u2500 config.js           # Configuration file for GPT settings\n\u2502   \u251c\u2500\u2500 parsers/                # Parsing logic\n\u2502   \u2502   \u2514\u2500\u2500 openapi-parser.js   # Logic for parsing OpenAPI documents\n\u2502   \u2514\u2500\u2500 utils/                  # Utility functions\n\u2502       \u2514\u2500\u2500 generation-utils.js # Utility functions for generation scripts\n\u251c\u2500\u2500 temp/                       # Temporary files and generated outputs\n\u251c\u2500\u2500 test/                       # Tests for the module\n\u2502   \u251c\u2500\u2500 generators.test.js      # Tests for generators\n\u2502   \u2514\u2500\u2500 parser.test.js          # Tests for parsers\n\u251c\u2500\u2500 .gitignore                  # Ignored files and directories\n\u251c\u2500\u2500 package-lock.json           # npm lock file\n\u251c\u2500\u2500 package.json                # npm package file\n\u2514\u2500\u2500 README.md                   # Project documentation\n")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install dependencies by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install\n")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("h3",{id:"openai-api-key-setup"},"OpenAI API Key Setup"),(0,r.kt)("p",null,"If you use GPT for scenario generation, set your OpenAI API key as an environment variable."),(0,r.kt)("h4",{id:"linuxmacos"},"Linux/MacOS:"),(0,r.kt)("p",null,"Add the API key to your shell configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export OPENAI_API_KEY='your-api-key-here'\n")),(0,r.kt)("p",null,"Reload your shell configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"source ~/.bashrc  # or source ~/.zshrc, etc.\n")),(0,r.kt)("h3",{id:"module-configuration-optional"},"Module Configuration (Optional)"),(0,r.kt)("p",null,"The module is pre-configured to work out of the box with sensible defaults. You can modify ",(0,r.kt)("inlineCode",{parentName:"p"},"src/GPT/config.js")," to customize the behavior:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"useGPT"),": Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),". Set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," to use GPT for generating ",(0,r.kt)("inlineCode",{parentName:"li"},".flex")," files."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"openaiApiKey"),": Set this in your environment if using GPT."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"consumer"),": Set this to ",(0,r.kt)("inlineCode",{parentName:"li"},"desktop-app")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"server-app")," to determine the format of the generated ",(0,r.kt)("inlineCode",{parentName:"li"},".flex")," files."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"model, maxTokens, temperature"),": Pre-set for general use, but adjustable for specific needs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"promptTemplate"),": Already tailored to generate useful Flex scenarios. Advanced users can modify it."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"outputDir, outputFileName"),": Defaults to saving outputs in the ",(0,r.kt)("inlineCode",{parentName:"li"},"temp")," directory with a ",(0,r.kt)("inlineCode",{parentName:"li"},".flex")," extension.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports = {\n    useGPT: false,\n    openaiApiKey: process.env.OPENAI_API_KEY,\n    consumer: 'desktop-app', // or 'server-app'\n    model: \"gpt-3.5-turbo\",\n    maxTokens: 1500,\n    temperature: 0.7,\n    promptTemplate: function(endpoints) {\n        return `\n        You are given the following API endpoints from an OpenAPI document:\n\n        ${JSON.stringify(endpoints, null, 2)}\n\n        Please generate a Flex scenario JSON file that includes:\n        ...\n        `;\n    },\n    outputDir: '../../temp',\n    outputFileName: 'flex-scenario-gpt.flex',\n};\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"generating-flex-files-and-curl-commands"},"Generating ",(0,r.kt)("inlineCode",{parentName:"h3"},".flex")," Files and cURL Commands"),(0,r.kt)("p",null,"You can generate ",(0,r.kt)("inlineCode",{parentName:"p"},".flex")," files and cURL commands using the scripts provided."),(0,r.kt)("h4",{id:"static-approach-faker"},"Static Approach (Faker)"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Run the script with ",(0,r.kt)("inlineCode",{parentName:"li"},"--useGPT=false")," to use Faker for generating data."),(0,r.kt)("li",{parentName:"ol"},"Customize field mappings in ",(0,r.kt)("inlineCode",{parentName:"li"},"field-mapping.js")," if needed."),(0,r.kt)("li",{parentName:"ol"},"Run the scripts.")),(0,r.kt)("h4",{id:"ai-approach-openai-gpt"},"AI Approach (OpenAI GPT)"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Run the script with ",(0,r.kt)("inlineCode",{parentName:"li"},"--useGPT=true")," to use GPT for generating data."),(0,r.kt)("li",{parentName:"ol"},"Ensure your API key is set and the ",(0,r.kt)("inlineCode",{parentName:"li"},"promptTemplate")," is configured in ",(0,r.kt)("inlineCode",{parentName:"li"},"config.js"),"."),(0,r.kt)("li",{parentName:"ol"},"Run the scripts.")),(0,r.kt)("h3",{id:"running-the-scripts"},"Running the Scripts"),(0,r.kt)("p",null,"All npm scripts should be run under ",(0,r.kt)("inlineCode",{parentName:"p"},"openapi-module"),"."),(0,r.kt)("p",null,"Go to the ",(0,r.kt)("inlineCode",{parentName:"p"},"flexbench/openapi-module")," on your current device:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd /Users/yourusername/projects/flexbench/openapi-module\n")),(0,r.kt)("h3",{id:"generate-curl-commands"},"Generate cURL Commands"),(0,r.kt)("p",null,"Generate cURL commands based on your OpenAPI file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm run generate-curl -- --openApiFilePath=sample/sample-openapi.yaml --outputFileName=./temp/curl-commands.sh\n")),(0,r.kt)("h3",{id:"generate-flex-scenarios"},"Generate Flex Scenarios"),(0,r.kt)("p",null,"Generate Flex scenarios:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm run generate-flex -- --openApiFilePath=sample/sample-openapi.yaml --outputFileName=flex-scenario.flex --useGPT=true --consumer=desktop-app\n")),(0,r.kt)("p",null,"You can omit the ",(0,r.kt)("inlineCode",{parentName:"p"},"--useGPT=true")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--consumer")," arguments to use default settings, which will generate the file as ",(0,r.kt)("inlineCode",{parentName:"p"},"flex-scenario.flex")," for the ",(0,r.kt)("inlineCode",{parentName:"p"},"desktop-app"),"."),(0,r.kt)("h3",{id:"generate-both-curl-commands-and-flex-scenarios"},"Generate Both cURL Commands and Flex Scenarios"),(0,r.kt)("p",null,"Generate both cURL commands and Flex scenarios:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm run generate-all -- --openApiFilePath=sample/sample-openapi.yaml --outputFileName=flex-scenario.flex --useGPT=true --consumer=server-app\n")),(0,r.kt)("h3",{id:"customizing-script-execution"},"Customizing Script Execution"),(0,r.kt)("p",null,"You can control the generation process via command-line arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm run generate-flex -- --openApiFilePath=sample/sample-openapi.yaml --outputFileName=flex-scenario.flex --useGPT=true --consumer=desktop-app\n")),(0,r.kt)("h3",{id:"params-explained"},"Params Explained:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"--openApiFilePath"),": Path to your OpenAPI YAML file. Required for all generation scripts."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"--openApiFilePath=sample/sample-openapi.yaml")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"--outputFileName"),": Filename for the generated ",(0,r.kt)("inlineCode",{parentName:"p"},".flex")," file or cURL commands. Required for all generation scripts."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"--outputFileName=flex-scenario.flex")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"--useGPT"),": Flag to determine whether to use GPT for generating ",(0,r.kt)("inlineCode",{parentName:"p"},".flex")," scenarios. Set to true for GPT-based generation, or false for static. Defaults to the setting in ",(0,r.kt)("inlineCode",{parentName:"p"},"config.js"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"--useGPT=true")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"--consumer"),": Specifies the format of the ",(0,r.kt)("inlineCode",{parentName:"p"},".flex")," file for either ",(0,r.kt)("inlineCode",{parentName:"p"},"desktop-app")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"server-app"),". Optional; defaults to the setting in ",(0,r.kt)("inlineCode",{parentName:"p"},"config.js")," if not provided."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"--consumer=desktop-app"))))),(0,r.kt)("h2",{id:"using-generated-flex-and-curl-files"},"Using Generated ",(0,r.kt)("inlineCode",{parentName:"h2"},".flex")," and cURL Files"),(0,r.kt)("h3",{id:"mock-server-setup"},"Mock Server Setup"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Install Prism")," to start a mock server:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install -g @stoplight/prism-cli \n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Run Prism")," with your OpenAPI YAML file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"prism mock sample-openapi.yaml -p 4000\n")),(0,r.kt)("h3",{id:"use-with-flexbench"},"Use with Flexbench"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Load the generated ",(0,r.kt)("inlineCode",{parentName:"li"},".flex")," file into the Flexbench desktop app."),(0,r.kt)("li",{parentName:"ol"},"Run the test scenarios directly from the app.")),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("h3",{id:"running-tests"},"Running Tests"),(0,r.kt)("p",null,"Run tests for the module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm test\n")))}c.isMDXComponent=!0}}]);