"use strict";(self.webpackChunkflexbench=self.webpackChunkflexbench||[]).push([[288],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={},i="Faker and GPT",l={unversionedId:"GSoC/2024/OpenAPI/Realistic-Data-Generate",id:"GSoC/2024/OpenAPI/Realistic-Data-Generate",title:"Faker and GPT",description:"Introduction",source:"@site/docs/GSoC/2024/OpenAPI/Realistic-Data-Generate.md",sourceDirName:"GSoC/2024/OpenAPI",slug:"/GSoC/2024/OpenAPI/Realistic-Data-Generate",permalink:"/flexbench/docs/GSoC/2024/OpenAPI/Realistic-Data-Generate",draft:!1,editUrl:"https://github.com/flexivian/flexbench/docs/GSoC/2024/OpenAPI/Realistic-Data-Generate.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OpenAPI-Feature-Report",permalink:"/flexbench/docs/GSoC/2024/OpenAPI/OpenAPI-Integration-Report"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Faker: The Traditional Approach",id:"faker-the-traditional-approach",level:2},{value:"GPT: The AI-Powered Data Generator",id:"gpt-the-ai-powered-data-generator",level:2},{value:"Comparison: Faker vs. GPT",id:"comparison-faker-vs-gpt",level:2},{value:"Future Directions: Machine Learning-Based Realistic Data Generation",id:"future-directions-machine-learning-based-realistic-data-generation",level:2},{value:"1. Set Up OpenAI API Integration",id:"1-set-up-openai-api-integration",level:3},{value:"Install <code>axios</code> for HTTP Requests",id:"install-axios-for-http-requests",level:4},{value:"Create a GPT Client",id:"create-a-gpt-client",level:4},{value:"2. Integrate GPT into OpenAPI Module",id:"2-integrate-gpt-into-openapi-module",level:3},{value:"Example: Generate <code>curl</code> Commands",id:"example-generate-curl-commands",level:4},{value:"Example: Generate <code>.flex</code> Scenarios",id:"example-generate-flex-scenarios",level:4},{value:"3. Automate the Process with OpenAPI Operations",id:"3-automate-the-process-with-openapi-operations",level:3},{value:"Using Prism to Run a Mock Server Based on OpenAPI",id:"using-prism-to-run-a-mock-server-based-on-openapi",level:3},{value:"1. Install Prism",id:"1-install-prism",level:3},{value:"2. Run a Mock Server",id:"2-run-a-mock-server",level:3},{value:"3. Test Your Mock Server",id:"3-test-your-mock-server",level:3},{value:"Example Usage in Your Project",id:"example-usage-in-your-project",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"faker-and-gpt"},"Faker and GPT"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"In the development of Flexbench OpenAPI Integration for simulating HTTPS scenarios. Two powerful tools for data generation are ",(0,r.kt)("strong",{parentName:"p"},"Faker")," and ",(0,r.kt)("strong",{parentName:"p"},"GPT"),". This document explores these tools, compares their capabilities, and provides insights into future machine learning solutions for realistic data generation."),(0,r.kt)("h2",{id:"faker-the-traditional-approach"},"Faker: The Traditional Approach"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Faker")," is a famous library that generates fake but realistic data. It is highly configurable and can produce data across a variety of domains, including names, addresses, emails, and phone numbers."),(0,r.kt)("p",null,"For Flexbench OpenAPI Integration at ",(0,r.kt)("strong",{parentName:"p"},"2024"),", I utilized faker for the realistic data generation for generating for the scenarios. So far, faker did good job on generated data."),(0,r.kt)("h2",{id:"gpt-the-ai-powered-data-generator"},"GPT: The AI-Powered Data Generator"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"GPT")," GPT is not rule-based but rather relies on deep learning models trained on vast datasets. This allows GPT to generate highly contextual and nuanced data, including text, dialogues, and more complex data forms that resemble human-like creativity and variability."),(0,r.kt)("h2",{id:"comparison-faker-vs-gpt"},"Comparison: Faker vs. GPT"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Faker"),(0,r.kt)("th",{parentName:"tr",align:null},"GPT"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Type of Data")),(0,r.kt)("td",{parentName:"tr",align:null},"Structured (names, addresses, etc.)"),(0,r.kt)("td",{parentName:"tr",align:null},"Unstructured (text, dialogues, creative content)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Determinism")),(0,r.kt)("td",{parentName:"tr",align:null},"High (consistent outputs)"),(0,r.kt)("td",{parentName:"tr",align:null},"Low (varied outputs)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Complexity")),(0,r.kt)("td",{parentName:"tr",align:null},"Low to Medium"),(0,r.kt)("td",{parentName:"tr",align:null},"High (handles complex scenarios)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Use Cases")),(0,r.kt)("td",{parentName:"tr",align:null},"Testing, mock data generation, form filling"),(0,r.kt)("td",{parentName:"tr",align:null},"Creative writing, chatbot training, content generation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Performance")),(0,r.kt)("td",{parentName:"tr",align:null},"Fast and lightweight"),(0,r.kt)("td",{parentName:"tr",align:null},"Slower due to computational intensity")))),(0,r.kt)("h2",{id:"future-directions-machine-learning-based-realistic-data-generation"},"Future Directions: Machine Learning-Based Realistic Data Generation"),(0,r.kt)("p",null,"To implement GPT into your OpenAPI module for generating realistic ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," commands and ",(0,r.kt)("inlineCode",{parentName:"p"},".flex")," scenarios, you can follow these steps:"),(0,r.kt)("h3",{id:"1-set-up-openai-api-integration"},"1. Set Up OpenAI API Integration"),(0,r.kt)("p",null,"First, you need to set up integration with the OpenAI API in your Node.js application."),(0,r.kt)("h4",{id:"install-axios-for-http-requests"},"Install ",(0,r.kt)("inlineCode",{parentName:"h4"},"axios")," for HTTP Requests"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"axios")," or any other HTTP client to make requests to the OpenAI API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install axios\n")),(0,r.kt)("h4",{id:"create-a-gpt-client"},"Create a GPT Client"),(0,r.kt)("p",null,"Create a module for interacting with the OpenAI API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// gptClient.js\nconst axios = require('axios');\n\nconst openaiApiKey = process.env.OPENAI_API_KEY;\n\nasync function generatePromptResponse(prompt, maxTokens = 150, temperature = 0.7) {\n    try {\n        const response = await axios.post(\n            'https://api.openai.com/v1/chat/completions',\n            {\n                model: 'gpt-4',\n                messages: [\n                    { role: 'system', content: 'You are an assistant that generates realistic test data.' },\n                    { role: 'user', content: prompt }\n                ],\n                max_tokens: maxTokens,\n                temperature: temperature,\n            },\n            {\n                headers: {\n                    'Authorization': `Bearer ${openaiApiKey}`,\n                    'Content-Type': 'application/json',\n                },\n            }\n        );\n\n        return response.data.choices[0].message.content;\n    } catch (error) {\n        console.error('Error generating prompt response:', error);\n        throw error;\n    }\n}\n\nmodule.exports = {\n    generatePromptResponse,\n};\n")),(0,r.kt)("h3",{id:"2-integrate-gpt-into-openapi-module"},"2. Integrate GPT into OpenAPI Module"),(0,r.kt)("p",null,"Now, modify your OpenAPI module to utilize GPT for generating realistic data for ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," commands and ",(0,r.kt)("inlineCode",{parentName:"p"},".flex")," scenarios."),(0,r.kt)("h4",{id:"example-generate-curl-commands"},"Example: Generate ",(0,r.kt)("inlineCode",{parentName:"h4"},"curl")," Commands"),(0,r.kt)("p",null,"Let's assume you want to generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," command with realistic test data for a given OpenAPI operation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// openApiModule.js\nconst gptClient = require('./gptClient');\n\nasync function generateCurlCommand(apiPath, method, exampleData) {\n    const prompt = `Generate a curl command for the ${method.toUpperCase()} request to ${apiPath} with the following data: ${JSON.stringify(exampleData)}`;\n    \n    const curlCommand = await gptClient.generatePromptResponse(prompt, 200);\n    \n    return curlCommand;\n}\n\n// Example usage\nconst apiPath = '/api/employees';\nconst method = 'POST';\nconst exampleData = {\n    name: 'Yujun Liu',\n    email: 'YujunLiu@example.com',\n    phone: '+1-555-0123-456',\n    address: '22 Bond Street, Watertown, MA, 02472, USA',\n    job_title: 'Software Engineer',\n    start_date: '2024-08-01',\n};\n\ngenerateCurlCommand(apiPath, method, exampleData).then((curlCommand) => {\n    console.log('Generated curl command:', curlCommand);\n}).catch((error) => {\n    console.error('Error:', error);\n});\n")),(0,r.kt)("h4",{id:"example-generate-flex-scenarios"},"Example: Generate ",(0,r.kt)("inlineCode",{parentName:"h4"},".flex")," Scenarios"),(0,r.kt)("p",null,"Similarly, you can generate ",(0,r.kt)("inlineCode",{parentName:"p"},".flex")," scenarios by adjusting the prompt to ask GPT for a full scenario."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// openApiModule.js\nconst gptClient = require('./gptClient');\n\nasync function generateFlexScenario(apiPath, method, exampleData) {\n    const prompt = `Generate a .flex scenario for the ${method.toUpperCase()} request to ${apiPath} with realistic test data including happy and sad paths. The data is: ${JSON.stringify(exampleData)}`;\n    \n    const flexScenario = await gptClient.generatePromptResponse(prompt, 500);\n    \n    return flexScenario;\n}\n\n// Example usage\ngenerateFlexScenario(apiPath, method, exampleData).then((flexScenario) => {\n    console.log('Generated .flex scenario:', flexScenario);\n}).catch((error) => {\n    console.error('Error:', error);\n});\n")),(0,r.kt)("h3",{id:"3-automate-the-process-with-openapi-operations"},"3. Automate the Process with OpenAPI Operations"),(0,r.kt)("p",null,"You can automate this process by reading your OpenAPI document, extracting paths and operations, and using GPT to generate test cases or scenarios."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// openApiModule.js\nconst fs = require('fs');\nconst gptClient = require('./gptClient');\nconst yaml = require('js-yaml');\n\nfunction loadOpenApiDocument(filePath) {\n    const fileContents = fs.readFileSync(filePath, 'utf8');\n    return yaml.load(fileContents);\n}\n\nasync function generateTestScenariosFromOpenApi(openApiDocPath) {\n    const openApiDoc = loadOpenApiDocument(openApiDocPath);\n\n    for (const [path, operations] of Object.entries(openApiDoc.paths)) {\n        for (const [method, operation] of Object.entries(operations)) {\n            const exampleData = operation.requestBody?.content?.['application/json']?.example || {};\n\n            const curlCommand = await generateCurlCommand(path, method, exampleData);\n            console.log(`Generated curl command for ${method.toUpperCase()} ${path}:\\n${curlCommand}`);\n\n            const flexScenario = await generateFlexScenario(path, method, exampleData);\n            console.log(`Generated .flex scenario for ${method.toUpperCase()} ${path}:\\n${flexScenario}`);\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"using-prism-to-run-a-mock-server-based-on-openapi"},"Using Prism to Run a Mock Server Based on OpenAPI"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Prism")," is a versatile tool that can serve as a mock server, validating and serving responses based on your OpenAPI documents. Here\u2019s how you can set up and use Prism to run a mock server for your API:"),(0,r.kt)("h3",{id:"1-install-prism"},"1. Install Prism"),(0,r.kt)("p",null,"First, you need to install Prism globally on your system:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @stoplight/prism-cli\n")),(0,r.kt)("h3",{id:"2-run-a-mock-server"},"2. Run a Mock Server"),(0,r.kt)("p",null,"Once Prism is installed, you can use it to run a mock server based on your OpenAPI document:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"prism mock path/to/your/openapi.yaml\n")),(0,r.kt)("h3",{id:"3-test-your-mock-server"},"3. Test Your Mock Server"),(0,r.kt)("p",null,"After the mock server is running, you can test it using ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," commands, Postman, or by generating requests from your scripts."),(0,r.kt)("h3",{id:"example-usage-in-your-project"},"Example Usage in Your Project"),(0,r.kt)("p",null,"Here\u2019s an example of how to integrate Prism into your testing workflow:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Start the Prism Mock Server")),(0,r.kt)("p",null,"You can start Prism in your Node.js script before running your tests. Ensure that Prism is pointed to your OpenAPI document:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"prism mock path/to/your/openapi.yaml\n")),(0,r.kt)("p",null,"Or, if you prefer to include this in your test automation, use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { exec } = require('child_process');\n\nexec('prism mock path/to/your/openapi.yaml', (err, stdout, stderr) => {\n  if (err) {\n    console.error(`Error starting Prism: ${stderr}`);\n    return;\n  }\n  console.log(`Prism started: ${stdout}`);\n  \n  // After starting Prism, you can run your tests here\n});\n")),(0,r.kt)("p",null,"When running tests:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start the Prism mock server."),(0,r.kt)("li",{parentName:"ul"},"Run your tests against the mock server."),(0,r.kt)("li",{parentName:"ul"},"Shut down Prism after tests complete.")))}u.isMDXComponent=!0}}]);