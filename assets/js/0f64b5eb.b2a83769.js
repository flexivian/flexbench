"use strict";(self.webpackChunkflexbench=self.webpackChunkflexbench||[]).push([[74],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6902:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={},s="OpenAPI-Feature-Report",i={unversionedId:"GSoC/2024/OpenAPI/OpenAPI-Integration-Report",id:"GSoC/2024/OpenAPI/OpenAPI-Integration-Report",title:"OpenAPI-Feature-Report",description:"Introduction",source:"@site/docs/GSoC/2024/OpenAPI/OpenAPI-Integration-Report.md",sourceDirName:"GSoC/2024/OpenAPI",slug:"/GSoC/2024/OpenAPI/OpenAPI-Integration-Report",permalink:"/flexbench/docs/GSoC/2024/OpenAPI/OpenAPI-Integration-Report",draft:!1,editUrl:"https://github.com/flexivian/flexbench/docs/GSoC/2024/OpenAPI/OpenAPI-Integration-Report.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Flexbench OpenAPI Module",permalink:"/flexbench/docs/GSoC/2024/OpenAPI/"},next:{title:"Faker and GPT",permalink:"/flexbench/docs/GSoC/2024/OpenAPI/Realistic-Data-Generate"}},p={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Available Node.js Libraries for OpenAPI Document Parsing",id:"available-nodejs-libraries-for-openapi-document-parsing",level:2},{value:"1. Swagger Parser",id:"1-swagger-parser",level:3},{value:"Break down of OpenAPI (Swagger) file structure",id:"break-down-of-openapi-swagger-file-structure",level:2},{value:"Functions and Methods of Swagger Parser",id:"functions-and-methods-of-swagger-parser",level:2},{value:"1. <code>validate</code>",id:"1-validate",level:3},{value:"2. <code>dereference</code>",id:"2-dereference",level:3},{value:"3. <code>bundle</code>",id:"3-bundle",level:3},{value:"4. <code>parse</code>",id:"4-parse",level:3},{value:"Information useful to Flexbench testing purpose",id:"information-useful-to-flexbench-testing-purpose",level:2},{value:"Example Implementation",id:"example-implementation",level:2}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"openapi-feature-report"},"OpenAPI-Feature-Report"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This report explores how to parse OpenAPI (Swagger) documents using Node.js. The goal is to identify suitable libraries and methods to read and extract information from OpenAPI documents."),(0,r.kt)("h2",{id:"available-nodejs-libraries-for-openapi-document-parsing"},"Available Node.js Libraries for OpenAPI Document Parsing"),(0,r.kt)("h3",{id:"1-swagger-parser"},"1. Swagger Parser"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description"),": Swagger Parser is a powerful schema validator for OpenAPI specifications."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Features"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Parse, validate, and dereference JSON/YAML schemas."),(0,r.kt)("li",{parentName:"ul"},"Resolve references (",(0,r.kt)("inlineCode",{parentName:"li"},"$ref"),") and bundle schemas.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Installation"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @apidevtools/swagger-parser\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const SwaggerParser = require('@apidevtools/swagger-parser');\n\nasync function parseOpenAPI() {\n  const api = await SwaggerParser.validate('path/to/openapi.yaml');\n  console.log(api);\n}\n\nparseOpenAPI();\n")),(0,r.kt)("h2",{id:"break-down-of-openapi-swagger-file-structure"},"Break down of OpenAPI (Swagger) file structure"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"OpenAPI Version"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Specifies the version of the OpenAPI Specification that the document conforms to.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"openapi: 3.0.0\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Info"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Provides metadata about the API, including the title, description, version, terms of service, contact information, and license.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"info:\n  title: Sample API\n  description: A sample API to illustrate OpenAPI concepts\n  version: 1.0.0\n  termsOfService: http://example.com/terms/\n  contact:\n    name: API Support\n    url: http://www.example.com/support\n    email: support@example.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Servers"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Defines the base URLs for the API. These can include server environments like development, staging, and production.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"servers:\n  - url: https://api.example.com/v1\n    description: Production server\n  - url: https://staging-api.example.com/v1\n    description: Staging server\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Paths"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Specifies the available endpoints (paths) for the API and the HTTP methods supported by each endpoint. Each path can have multiple operations (e.g., GET, POST, PUT, DELETE).")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"paths:\n  /users:\n    get:\n      summary: Get users\n      operationId: getUsers\n      responses:\n        '200':\n          description: A list of users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                    name:\n                      type: string\n    post:\n      summary: Create user\n      operationId: createUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                email:\n                  type: string\n      responses:\n        '201':\n          description: User created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  name:\n                    type: string\n                  email:\n                    type: string\n  /users/{id}:\n    get:\n      summary: Get user by ID\n      operationId: getUserById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: User details\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  name:\n                    type: string\n                  email:\n                    type: string\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Components"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Reusable components such as schemas, responses, parameters, examples, request bodies, headers, security schemes, and callbacks. These components can be referenced throughout the specification to avoid duplication.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"components:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        email:\n          type: string\n  responses:\n    NotFound:\n      description: Entity not found\n  parameters:\n    userId:\n      name: id\n      in: path\n      required: true\n      schema:\n        type: integer\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Security"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Describes the security mechanisms (e.g., API key, OAuth2, Basic authentication) that are used to protect the API endpoints.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"security:\n  - apiKeyAuth: []\ncomponents:\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-Key\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Tags"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Allows for logical grouping of operations by resources or any other qualifier. Tags can be used for organizing the documentation.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"tags:\n  - name: user\n    description: Operations related to users\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"External Documentation"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Provides additional external documentation references.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"externalDocs:\n  description: Find more info here\n  url: http://example.com\n")))),(0,r.kt)("h2",{id:"functions-and-methods-of-swagger-parser"},"Functions and Methods of Swagger Parser"),(0,r.kt)("h3",{id:"1-validate"},"1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"validate")),(0,r.kt)("p",null,"Validates an OpenAPI document and returns the dereferenced API object. This ensures the document conforms to the OpenAPI Specification."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const SwaggerParser = require('@apidevtools/swagger-parser');\n\nasync function validateOpenAPI(filePath) {\n  try {\n    const api = await SwaggerParser.validate(filePath);\n    console.log('API name:', api.info.title);\n    console.log('API version:', api.info.version);\n  } catch (err) {\n    console.error('Validation failed:', err.message);\n  }\n}\n\nvalidateOpenAPI('path/to/openapi.yaml');\n")),(0,r.kt)("h3",{id:"2-dereference"},"2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"dereference")),(0,r.kt)("p",null,"Dereferences an OpenAPI document, replacing all ",(0,r.kt)("inlineCode",{parentName:"p"},"$ref")," pointers with the referenced objects. This is useful for working with a fully resolved API definition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const SwaggerParser = require('@apidevtools/swagger-parser');\n\nasync function dereferenceOpenAPI(filePath) {\n  try {\n    const api = await SwaggerParser.dereference(filePath);\n    console.log('Dereferenced API:', JSON.stringify(api, null, 2));\n  } catch (err) {\n    console.error('Dereferencing failed:', err.message);\n  }\n}\n\ndereferenceOpenAPI('path/to/openapi.yaml');\n")),(0,r.kt)("h3",{id:"3-bundle"},"3. ",(0,r.kt)("inlineCode",{parentName:"h3"},"bundle")),(0,r.kt)("p",null,"Bundles the OpenAPI document into a single file, resolving all references but keeping the ",(0,r.kt)("inlineCode",{parentName:"p"},"$ref")," pointers intact. This is useful for creating a self-contained API definition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const SwaggerParser = require('@apidevtools/swagger-parser');\nconst fs = require('fs');\n\nasync function bundleOpenAPI(filePath, outputPath) {\n  try {\n    const api = await SwaggerParser.bundle(filePath);\n    fs.writeFileSync(outputPath, JSON.stringify(api, null, 2));\n    console.log('Bundled API saved to', outputPath);\n  } catch (err) {\n    console.error('Bundling failed:', err.message);\n  }\n}\n\nbundleOpenAPI('path/to/openapi.yaml', 'path/to/bundled-api.json');\n")),(0,r.kt)("h3",{id:"4-parse"},"4. ",(0,r.kt)("inlineCode",{parentName:"h3"},"parse")),(0,r.kt)("p",null,"Parses the OpenAPI document and returns the parsed API object without validation. This is useful for quickly loading the API definition without checking for correctness."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const SwaggerParser = require('@apidevtools/swagger-parser');\n\nasync function parseOpenAPI(filePath) {\n  try {\n    const api = await SwaggerParser.parse(filePath);\n    console.log('Parsed API:', JSON.stringify(api, null, 2));\n  } catch (err) {\n    console.error('Parsing failed:', err.message);\n  }\n}\n\nparseOpenAPI('path/to/openapi.yaml');\n")),(0,r.kt)("h2",{id:"information-useful-to-flexbench-testing-purpose"},"Information useful to Flexbench testing purpose"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"API Endpoints:\n\u2022\tDescription: Extract the list of all available endpoints (paths) in the API.\n\u2022\tUsage: Each endpoint represents a test scenario where various HTTP methods (GET, POST, PUT, DELETE) need to be tested."),(0,r.kt)("li",{parentName:"ol"},"HTTP Methods:\n\u2022\tDescription: For each endpoint, identify the supported HTTP methods.\n\u2022\tUsage: Determine the type of requests to be made (e.g., GET requests for retrieving data, POST requests for creating data)."),(0,r.kt)("li",{parentName:"ol"},"Parameters:\n\u2022\tPath Parameters: Extract path parameters required by the endpoint.\n\u2022\tQuery Parameters: Extract optional or required query parameters.\n\u2022\tHeader Parameters: Extract any custom headers required for the request.\n\u2022\tBody Parameters: Extract the schema for the request body (for methods like POST and PUT)."),(0,r.kt)("li",{parentName:"ol"},"Request Body Schema:\n\u2022\tDescription: For methods that require a request body (e.g., POST, PUT), extract the schema and generate realistic test data.\n\u2022\tUsage: Use tools like Faker to generate valid input data for testing different scenarios (e.g., valid and invalid data)."),(0,r.kt)("li",{parentName:"ol"},"Responses:\n\u2022\tDescription: Extract the expected responses for each endpoint and method, including the status codes and response body schemas.\n\u2022\tUsage: Verify that the actual responses match the expected responses defined in the OpenAPI document."),(0,r.kt)("li",{parentName:"ol"},"Security Requirements:\n\u2022\tDescription: Identify any security mechanisms (e.g., API keys, OAuth2) required to access the endpoints.\n\u2022\tUsage: Include appropriate authentication headers in the test scenarios.")),(0,r.kt)("h2",{id:"example-implementation"},"Example Implementation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const SwaggerParser = require('@apidevtools/swagger-parser');\nconst fs = require('fs');\nconst faker = require('faker');\n\nasync function generateFlexScenarios(openApiFilePath, outputDir) {\n    try {\n        const api = await SwaggerParser.validate(openApiFilePath);\n        const scenarios = [];\n\n        for (const [pathKey, pathValue] of Object.entries(api.paths)) {\n            for (const [method, operation] of Object.entries(pathValue)) {\n                const scenario = createFlexScenario(pathKey, method, operation);\n                scenarios.push(scenario);\n            }\n        }\n\n        const outputFilePath = path.join(outputDir, 'scenarios.flex');\n        fs.writeFileSync(outputFilePath, JSON.stringify(scenarios, null, 2));\n        console.log(`Flex scenarios generated and saved to ${outputFilePath}`);\n    } catch (err) {\n        console.error(`Error generating flex scenarios: ${err.message}`);\n    }\n}\n\nfunction createFlexScenario(path, method, operation) {\n    const scenario = {\n        path,\n        method,\n        summary: operation.summary || '',\n        description: operation.description || '',\n        parameters: extractParameters(operation.parameters),\n        requestBody: operation.requestBody ? generateFakeData(operation.requestBody.content['application/json'].schema) : null,\n        responses: extractResponses(operation.responses),\n        security: operation.security || []\n    };\n\n    return scenario;\n}\n\nfunction extractParameters(parameters) {\n    const extracted = {\n        path: {},\n        query: {},\n        header: {},\n        body: {}\n    };\n\n    if (parameters) {\n        parameters.forEach(param => {\n            if (param.in === 'path') {\n                extracted.path[param.name] = param.schema;\n            } else if (param.in === 'query') {\n                extracted.query[param.name] = param.schema;\n            } else if (param.in === 'header') {\n                extracted.header[param.name] = param.schema;\n            } else if (param.in === 'body') {\n                extracted.body[param.name] = param.schema;\n            }\n        });\n    }\n\n    return extracted;\n}\n\nfunction generateFakeData(schema) {\n    const data = {};\n    for (const [key, value] of Object.entries(schema.properties)) {\n        if (value.type === 'string') {\n            data[key] = faker.lorem.word();\n        } else if (value.type === 'integer') {\n            data[key] = faker.datatype.number();\n        } else if (value.type === 'boolean') {\n            data[key] = faker.datatype.boolean();\n        }\n    }\n    return data;\n}\n\nfunction extractResponses(responses) {\n    const extracted = {};\n    for (const [statusCode, response] of Object.entries(responses)) {\n        extracted[statusCode] = response.description;\n    }\n    return extracted;\n}\n\nmodule.exports = {\n    generateFlexScenarios\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Recommended Approach"),":\nFor the Flexbench project, ",(0,r.kt)("strong",{parentName:"p"},"Swagger Parser")," is recommended"))}u.isMDXComponent=!0}}]);